1
00:00:00.025 --> 00:00:04.750
ノイズこんにちは。

2
00:00:04.750 --> 00:00:08.641
すべての競争では、我々は事前に指定された
データセットを処理する必要があります

3
00:00:08.641 --> 00:00:11.990
既存のフィーチャから新機能を生成します。

4
00:00:11.990 --> 00:00:16.082
これは、多くの場合、他の競合他社と同じト
ラックに滞在する必要があります

5
00:00:16.082 --> 00:00:18.656
時には慎重な機能の前処理と

6
00:00:18.656 --> 00:00:23.520
効率的なエンジニアリングは、あなたが達成
に努力するエッジを与えることができます。

7
00:00:23.520 --> 00:00:28.490
したがって、次のビデオでは、我々は基本的
な機能の非常に有用なトピックをカバーしま
す

8
00:00:28.490 --> 00:00:33.480
さまざまな種類の機能に対する前処理と基本
機能の生成。

9
00:00:33.480 --> 00:00:37.550
すなわち、我々は、数値機能、カテゴリの機
能を通過します

10
00:00:37.550 --> 00:00:39.804
datetime
フィーチャと座標フィーチャ。

11
00:00:39.804 --> 00:00:45.337
そして、最後のビデオでは、我々は、ミッシ
ョンの値を円盤投げされます。

12
00:00:45.337 --> 00:00:48.590
その傍ら、前処理の円盤投げ依存性も

13
00:00:48.590 --> 00:00:50.690
我々が使用する予定のモデルの生成。

14
00:00:50.690 --> 00:00:55.468
だから、次のビデオの広い目標は、取得を支
援することです

15
00:00:55.468 --> 00:00:58.220
これらの非常に必要なスキル。

16
00:00:58.220 --> 00:01:03.016
次のトピックのアイデアを得るために、同様
のデータの例から始めましょう

17
00:01:03.016 --> 00:01:05.950
私たちは競争の中で発生する可能性がありま
す。

18
00:01:05.950 --> 00:01:08.930
とよく知られているタイタニックデータセッ
トを見てみましょう。

19
00:01:09.970 --> 00:01:14.600
それは最後の旅行の間にタイタニック号のラ
イナーにあった人々についてのデータを格納
します。

20
00:01:15.780 --> 00:01:20.730
ここでは、典型的なデータフレームの大会で
動作するようにしている。

21
00:01:20.730 --> 00:01:24.110
各行は人を表し、各列は機能です。

22
00:01:25.270 --> 00:01:27.440
我々は、機能のさまざまな種類があります。

23
00:01:27.440 --> 00:01:31.820
たとえば、[存続]
列の値は0または1です。

24
00:01:31.820 --> 00:01:33.290
この機能はバイナリです。

25
00:01:33.290 --> 00:01:36.670
ところで、それは我々がこのタスクで予測す
る必要があるものです。

26
00:01:36.670 --> 00:01:38.330
我々の標的だ

27
00:01:38.330 --> 00:01:41.420
なので、年齢や料金は数値の特徴です。

28
00:01:41.420 --> 00:01:46.550
Sibims p と焙烙のアカウントステ
ートメントとカテゴリ機能を着手した。

29
00:01:46.550 --> 00:01:49.390
チケットは単なる ID
であり、名前はテキストです。

30
00:01:50.480 --> 00:01:54.100
だから確かに、我々はここで異なる機能の種
類がありますが、

31
00:01:54.100 --> 00:01:58.790
異なる型を持つさまざまな機能を気にする必
要がある理由を理解していますか。

32
00:01:58.790 --> 00:02:00.300
さて、2つの主な理由がある

33
00:02:00.300 --> 00:02:05.110
これは、すなわち、我々のモデルでの前処理
との間の強力な接続

34
00:02:05.110 --> 00:02:07.850
各フィーチャタイプの共通フィーチャ生成メ
ソッド。

35
00:02:09.130 --> 00:02:11.835
まず、フィーチャーの前処理について説明し
ます。

36
00:02:13.110 --> 00:02:17.520
時間のほとんどは、我々だけの機能を取るこ
とができる、私たちのお気に入りのモデルに
合わせて

37
00:02:17.520 --> 00:02:19.470
それは素晴らしい結果を得ることを期待する
。

38
00:02:20.470 --> 00:02:25.120
機能の各タイプは、改善するために前処理さ
れる独自の方法を持っています

39
00:02:25.120 --> 00:02:27.290
モデルの品質。

40
00:02:27.290 --> 00:02:30.394
つまり、前処理物質の喜び、

41
00:02:30.394 --> 00:02:33.360
使用するモデルによって異なります。

42
00:02:33.360 --> 00:02:34.185
例えば

43
00:02:34.185 --> 00:02:39.320
ターゲットが pclass 機能に対して
非線形依存関係を持っていると仮定しましょ
う。

44
00:02:39.320 --> 00:02:44.280
1の Pclass の線形は通常 1,
2 のターゲットにつながる0に導き、

45
00:02:44.280 --> 00:02:46.620
3は再び1につながる。

46
00:02:46.620 --> 00:02:50.700
明らかに、これは線形依存性線形モデルでは
ないため、

47
00:02:50.700 --> 00:02:52.760
1つは、ここで良い結果を得る。

48
00:02:52.760 --> 00:02:56.280
従って線形モデルの質を改善するためには、

49
00:02:56.280 --> 00:02:59.650
我々はいくつかの方法で pclass
機能を前処理したいと思います。

50
00:02:59.650 --> 00:03:05.930
例えば、我々の特徴を3つに置き換えるいわ
ゆる

51
00:03:05.930 --> 00:03:08.830
pclass
値のそれぞれに1を指定します。

52
00:03:08.830 --> 00:03:13.020
線形モデルは、以前のケースよりもはるかに
良い今フィットします。

53
00:03:14.070 --> 00:03:19.120
ただし、ランダムフォレストでは、この機能
をまったく変換する必要はありません。

54
00:03:19.120 --> 00:03:24.050
ランダムフォレストは、簡単に別々に各
pclass を置くことができます

55
00:03:24.050 --> 00:03:26.590
細かい確率を予測します。

56
00:03:26.590 --> 00:03:29.460
だから、それは前処理の例だった。

57
00:03:29.460 --> 00:03:34.035
2番目の理由は、我々は別の機能のテキスト
を認識する必要があります

58
00:03:34.035 --> 00:03:36.542
新機能の生成を容易にします。

59
00:03:36.542 --> 00:03:38.732
機能の種類が異なります。

60
00:03:38.732 --> 00:03:42.390
共通の特徴生成方法で理解力。

61
00:03:42.390 --> 00:03:46.470
それらを通してモデルを改善する能力を得て
いる間。

62
00:03:46.470 --> 00:03:51.490
特徴の生成の基礎のまた理解は大いに助ける

63
00:03:51.490 --> 00:03:55.050
今後の高度な機能のトピックで私たちのコー
スから。

64
00:03:56.300 --> 00:03:57.960
最初のポイントと同様に、

65
00:03:57.960 --> 00:04:02.000
ここでのモデルの理解は、便利な機能を作成
するのに役立ちます。

66
00:04:02.000 --> 00:04:04.230
例をお見せしましょう。

67
00:04:04.230 --> 00:04:09.250
と言って、私たちは、お店が来週毎日販売す
るりんごの数を予測する必要があります

68
00:04:09.250 --> 00:04:12.933
そして、我々はすでにデータの列車として数
ヶ月の販売履歴を持っている。

69
00:04:14.310 --> 00:04:19.640
我々は、データを介して明らかに直線的な傾
向を持っていると考えてみましょう

70
00:04:19.640 --> 00:04:23.310
我々はそれについてモデルに通知したい。

71
00:04:23.310 --> 00:04:24.950
視覚的な例を提供するには、

72
00:04:24.950 --> 00:04:30.190
我々は、テストから列車と最初の日から最後
の日と2番目のテーブルを準備します。

73
00:04:31.510 --> 00:04:34.280
モジュールは、リニアトレインを中和するた
めの1つの方法

74
00:04:34.280 --> 00:04:38.180
は、週番号の過去を示す機能を追加すること
です。

75
00:04:38.180 --> 00:04:39.160
この機能を使用すると、

76
00:04:39.160 --> 00:04:42.579
線形モデルは、既存の lineer と依
存関係を正常に見つけることができます。

77
00:04:43.880 --> 00:04:46.660
一方、グラデーションブーストデシジョンツ
リーでは、

78
00:04:46.660 --> 00:04:51.540
この機能は、週ごとの平均目標値のようなも
のを計算します。

79
00:04:51.540 --> 00:04:56.690
ここでは、平均値を手動で計算し、データフ
レームに印刷した。

80
00:04:56.690 --> 00:04:59.810
我々は、6週目のリンゴの数を予測するつも
りだ。

81
00:05:00.850 --> 00:05:04.400
ノードは、我々は実際にここにいる。

82
00:05:04.400 --> 00:05:07.330
それでは、デシジョンツリー内のグラデーシ
ョンをプロットしてみましょう

83
00:05:07.330 --> 00:05:09.130
は、弱い機能を完了します。

84
00:05:10.240 --> 00:05:13.960
我々は6週目に勾配 goosting
デシジョンツリーを訓練していないとして、

85
00:05:13.960 --> 00:05:16.410
これは、5番目との間に分割されません

86
00:05:16.410 --> 00:05:21.120
6週間後、我々は番号をもたらす

87
00:05:21.120 --> 00:05:25.500
第6週、モデルは5週目から波を使用して終
了します。

88
00:05:25.500 --> 00:05:28.868
残念ながら見ることができるように、ユーザ
ーはここに列車を着陸してはならない。

89
00:05:28.868 --> 00:05:32.011
そして、その逆、我々は例を思い付くことが
できる

90
00:05:32.011 --> 00:05:36.743
3つの決定のために有益である生成された機
能の。

91
00:05:36.743 --> 00:05:39.450
と便利な spoliniar モデル。

92
00:05:39.450 --> 00:05:43.015
したがって、この例では、機能への我々のア
プローチを示しています

93
00:05:43.015 --> 00:05:47.053
世代は、採用されたモデルの理解に頼る必要
があります。

94
00:05:47.053 --> 00:05:51.585
この機能をまとめるためには、最初のフィー
チャー前処理が必要です。

95
00:05:51.585 --> 00:05:55.812
データをモデルに適合させるために使用する
必要がある計測器です。 ' 第二に、

96
00:05:55.812 --> 00:05:59.963
特徴の生成はあなたを助けることができる非
常に強力な技術である

97
00:05:59.963 --> 00:06:05.810
大幅に競争の中で、時には必要なエッジを提
供します。

98
00:06:05.810 --> 00:06:08.785
そして、最後に、両方の機能の前処理と

99
00:06:08.785 --> 00:06:13.680
フィーチャーの生成は、使用するモデルによ
って異なります。

100
00:06:13.680 --> 00:06:17.050
この3つのトピックでは、フィーチャタイプ
に関連して、

101
00:06:17.050 --> 00:06:20.410
次のビデオの一般的なテーマになります。

102
00:06:20.410 --> 00:06:22.970
最も頻繁な方法を徹底的に検討する

103
00:06:22.970 --> 00:06:25.788
これは、あなたのソリューションに組み込む
ことができることができます。

104
00:06:25.788 --> 00:06:29.364
がんばって。

105
00:06:29.364 --> 00:06:32.889
音

106
00:06:32.889 --> 00:06:40.219
音楽

